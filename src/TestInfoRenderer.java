/*
 * File: TestInfoRenderer.java
 * Author: Fredrik Johansson
 * Date: 2016-10-31
 */

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;


/**
 * Specifies how a TestInfo object should be rendered in the GUI
 */
public class TestInfoRenderer implements ListCellRenderer<TestInfo> {

    @Override
    public Component getListCellRendererComponent(JList<? extends TestInfo> list,
                                                  TestInfo value,
                                                  int index,
                                                  boolean isSelected,
                                                  boolean cellHasFocus) {
        JTextPane pane = new JTextPane();
        pane.setBackground(new Color(0, 0, 0, 0));
        pane.setForeground(UI.COLOR_TEXT);
        pane.setBorder(BorderFactory.createLineBorder(UI.TRANSPARENT, 6));
        StyledDocument text = pane.getStyledDocument();

        try {
            printIcon(value.getStatus(), text);
            printText(value, text);

        } catch (BadLocationException e) {}
        return pane;
    }

    private void printIcon(TestInfo.Status status, StyledDocument text)
                                            throws BadLocationException {

        Style textColor = text.addStyle("TextColor", null);
        switch (status) {
            case SUCCESS:
                StyleConstants.setForeground(textColor, UI.COLOR_SUCCESS);
                text.insertString(text.getLength(), " ✔ ", textColor);
                break;
            case FAILED:
                StyleConstants.setForeground(textColor, UI.COLOR_FAIL);
                text.insertString(text.getLength(), " ✘ ", textColor);
                break;
            case RUNNING:
                text.insertString(text.getLength(), " ↻ ", null);
                break;
            case WARNING:
                StyleConstants.setForeground(textColor, UI.COLOR_WARNING);
                text.insertString(text.getLength(), " ⚠ ", textColor);
                break;
        }
    }

    private void printText(TestInfo value, StyledDocument text)
                                            throws BadLocationException {

        text.insertString(text.getLength(), value.getName(), null);
        if (value.hasException()) {
            Style textColor = text.addStyle("TextColor", null);
            text.insertString(text.getLength(), "\n    Generated by ", null);
            StyleConstants.setForeground(textColor, UI.COLOR_FAIL);
            text.insertString(text.getLength(),
                    value.getException().getClass().getName(), textColor);
        }

        if (value.getStatus() == TestInfo.Status.RUNNING) {
            text.insertString(text.getLength(), ": Running", null);
        }
    }
}
